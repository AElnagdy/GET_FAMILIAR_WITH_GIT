
GPT_ADC_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000594  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000608  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000902  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000719  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000122  00000000  00000000  000029a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 c8 02 	jmp	0x590	; 0x590 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
#include "AVC.h"
void ADC_Init()
{
	/*DDRA=0b00000000;*/
	
	ADMUX = 0b11000000;
  90:	80 ec       	ldi	r24, 0xC0	; 192
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	ADCSRA = 0b10000111;
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  9c:	08 95       	ret

0000009e <ADC_Read>:
}
int ADC_Read( char channel_num)
{
	channel_num &=0x07; //must be from 0 --> 7
	
	ADMUX = ADMUX | channel_num; //choose the correct channel by setting the channel number in MUX4:0 bits
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	87 70       	andi	r24, 0x07	; 7
  a6:	98 2b       	or	r25, r24
  a8:	90 83       	st	Z, r25
	
	ADCSRA |= (1<<ADSC); //start conversion write ’1? to ADSC
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	
	while((ADCSRA & (1<<ADIF)) == 0); // wait for conversion to complete ADIF becomes '1'
  b4:	80 81       	ld	r24, Z
  b6:	84 ff       	sbrs	r24, 4
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <ADC_Read+0x16>
	
	ADCSRA |=(1<<ADIF); //clear ADIF by write'1' to it :)
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	80 83       	st	Z, r24
	
	return (ADC/9); //return the data register
  c4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  cc:	af e8       	ldi	r26, 0x8F	; 143
  ce:	b3 ee       	ldi	r27, 0xE3	; 227
  d0:	0e 94 b9 02 	call	0x572	; 0x572 <__umulhisi3>
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
  d8:	96 95       	lsr	r25
  da:	87 95       	ror	r24
  dc:	96 95       	lsr	r25
  de:	87 95       	ror	r24
  e0:	08 95       	ret

000000e2 <DIO_Init>:


void DIO_Init()
{
	//DDRA=DDRA_INIT;
	DDRB=DDRB_INIT;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 b9       	out	0x04, r24	; 4
	DDRC=DDRC_INIT;
  e6:	8e e7       	ldi	r24, 0x7E	; 126
  e8:	87 b9       	out	0x07, r24	; 7
	DDRD=DDRD_INIT;
  ea:	8f e7       	ldi	r24, 0x7F	; 127
  ec:	8a b9       	out	0x0a, r24	; 10
	
	
	//PORTA=PORTA_INIT;
	PORTB=PORTB_INIT;
  ee:	15 b8       	out	0x05, r1	; 5
	PORTC=PORTC_INIT;
  f0:	18 b8       	out	0x08, r1	; 8
	PORTD=PORTD_INIT;
  f2:	1b b8       	out	0x0b, r1	; 11
  f4:	08 95       	ret

000000f6 <LED_ON>:
 *  Author: Ahmed Lotfy
 */ 
#include "LED.h"
void LED_ON(void)
{
	SET_BIT(PORTD,PORTD2); 
  f6:	5a 9a       	sbi	0x0b, 2	; 11
  f8:	08 95       	ret

000000fa <LED_OFF>:
}
void LED_OFF(void)
{
	CLR_BIT(PORTD,PORTD2); 
  fa:	5a 98       	cbi	0x0b, 2	; 11
  fc:	08 95       	ret

000000fe <main>:
#include "LED.h"
extern volatile uint16 no_of_overflow;

int main(void)
{
	sei();
  fe:	78 94       	sei
	DIO_Init();
 100:	0e 94 71 00 	call	0xe2	; 0xe2 <DIO_Init>
	Init_Timer();
 104:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_Timer>
	ADC_Init();
 108:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	UART_init();
 10c:	0e 94 0d 01 	call	0x21a	; 0x21a <UART_init>
	unsigned long Time;
	uint16 temp;
	/* Replace with your application code */
	while (1)
	{
		Time=Get_time();
 110:	0e 94 ca 00 	call	0x194	; 0x194 <Get_time>
		if(Time>1000 )
 114:	69 3e       	cpi	r22, 0xE9	; 233
 116:	73 40       	sbci	r23, 0x03	; 3
 118:	81 05       	cpc	r24, r1
 11a:	91 05       	cpc	r25, r1
 11c:	c8 f3       	brcs	.-14     	; 0x110 <main+0x12>
		{
			temp=Temp_Read();
 11e:	0e 94 a1 00 	call	0x142	; 0x142 <Temp_Read>
			if(temp>19)
 122:	44 97       	sbiw	r24, 0x14	; 20
 124:	30 f0       	brcs	.+12     	; 0x132 <main+0x34>
			{
		     UART_Transmit(1);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			 LED_ON();
 12c:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_ON>
 130:	05 c0       	rjmp	.+10     	; 0x13c <main+0x3e>
			}
			else if(temp<=19)
			{
			 UART_Transmit(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 1a 01 	call	0x234	; 0x234 <UART_Transmit>
			 LED_OFF();
 138:	0e 94 7d 00 	call	0xfa	; 0xfa <LED_OFF>
			}
			CLR_TIMER();
 13c:	0e 94 c4 00 	call	0x188	; 0x188 <CLR_TIMER>
 140:	e7 cf       	rjmp	.-50     	; 0x110 <main+0x12>

00000142 <Temp_Read>:
 *  Author: Ahmed Lotfy
 */
#include "Temp_Sensor.h"
uint16 Temp_Read(void)
{
	return (ADC_Read(0));
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_Read>
	
 148:	08 95       	ret

0000014a <Init_Timer>:
#include <avr/interrupt.h>
#include "Timer.h"
volatile uint16 no_of_overflow=0;
void Init_Timer(void)
{
	CLR_BIT(TCCR0A,WGM00);
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	84 bd       	out	0x24, r24	; 36
	CLR_BIT(TCCR0A,WGM01);
 150:	84 b5       	in	r24, 0x24	; 36
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	84 bd       	out	0x24, r24	; 36
	CLR_BIT(TCCR0A,COM0A1);
 156:	84 b5       	in	r24, 0x24	; 36
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	84 bd       	out	0x24, r24	; 36
	CLR_BIT(TCCR0A,COM0A0);
 15c:	84 b5       	in	r24, 0x24	; 36
 15e:	8f 7b       	andi	r24, 0xBF	; 191
 160:	84 bd       	out	0x24, r24	; 36
	CLR_BIT(TCCR0B,WGM02);
 162:	85 b5       	in	r24, 0x25	; 37
 164:	87 7f       	andi	r24, 0xF7	; 247
 166:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR0B,CS02); //timer clock 8MHZ/64=125KHZ
 168:	85 b5       	in	r24, 0x25	; 37
 16a:	8b 7f       	andi	r24, 0xFB	; 251
 16c:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR0B,CS01);
 16e:	85 b5       	in	r24, 0x25	; 37
 170:	82 60       	ori	r24, 0x02	; 2
 172:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR0B,CS00);
 174:	85 b5       	in	r24, 0x25	; 37
 176:	81 60       	ori	r24, 0x01	; 1
 178:	85 bd       	out	0x25, r24	; 37
	//OCR0=125;
	SET_BIT(TIMSK0,TOIE0);
 17a:	ee e6       	ldi	r30, 0x6E	; 110
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	81 60       	ori	r24, 0x01	; 1
 182:	80 83       	st	Z, r24
    TCNT0=0;	
 184:	16 bc       	out	0x26, r1	; 38
 186:	08 95       	ret

00000188 <CLR_TIMER>:
}
void CLR_TIMER(void)
{
	TCNT0=0;
 188:	16 bc       	out	0x26, r1	; 38
	no_of_overflow=0;
 18a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 18e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 192:	08 95       	ret

00000194 <Get_time>:
}
unsigned long Get_time(void)
{
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	cf 93       	push	r28
 return((no_of_overflow*2)+(TCNT0*0.008));	//time for over flow=2.048ms
 19e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 1a2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 1a6:	c6 b5       	in	r28, 0x26	; 38
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 be 01 	call	0x37c	; 0x37c <__floatunsisf>
 1b4:	6b 01       	movw	r12, r22
 1b6:	7c 01       	movw	r14, r24
 1b8:	6c 2f       	mov	r22, r28
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 c0 01 	call	0x380	; 0x380 <__floatsisf>
 1c4:	2f e6       	ldi	r18, 0x6F	; 111
 1c6:	32 e1       	ldi	r19, 0x12	; 18
 1c8:	43 e0       	ldi	r20, 0x03	; 3
 1ca:	5c e3       	ldi	r21, 0x3C	; 60
 1cc:	0e 94 4c 02 	call	0x498	; 0x498 <__mulsf3>
 1d0:	9b 01       	movw	r18, r22
 1d2:	ac 01       	movw	r20, r24
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	0e 94 23 01 	call	0x246	; 0x246 <__addsf3>
 1dc:	0e 94 8f 01 	call	0x31e	; 0x31e <__fixunssfsi>
}
 1e0:	cf 91       	pop	r28
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

000001ec <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 no_of_overflow++;
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <UART_init>:
 */
#include <avr\io.h>
#include "UART_init.h"
void UART_init()
{
	UBRR0L = Baud_rate;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = Baud_rate >> 8;
 220:	8f e2       	ldi	r24, 0x2F	; 47
 222:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 232:	08 95       	ret

00000234 <UART_Transmit>:
}
void UART_Transmit(char data)
{
	while(!(UCSR0A & ( 1<<UDRE0)))
 234:	e0 ec       	ldi	r30, 0xC0	; 192
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	90 81       	ld	r25, Z
 23a:	95 ff       	sbrs	r25, 5
 23c:	fd cf       	rjmp	.-6      	; 0x238 <UART_Transmit+0x4>
	{
	}
	UDR0 = data;
 23e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 242:	08 95       	ret

00000244 <__subsf3>:
 244:	50 58       	subi	r21, 0x80	; 128

00000246 <__addsf3>:
 246:	bb 27       	eor	r27, r27
 248:	aa 27       	eor	r26, r26
 24a:	0e 94 3a 01 	call	0x274	; 0x274 <__addsf3x>
 24e:	0c 94 12 02 	jmp	0x424	; 0x424 <__fp_round>
 252:	0e 94 04 02 	call	0x408	; 0x408 <__fp_pscA>
 256:	38 f0       	brcs	.+14     	; 0x266 <__addsf3+0x20>
 258:	0e 94 0b 02 	call	0x416	; 0x416 <__fp_pscB>
 25c:	20 f0       	brcs	.+8      	; 0x266 <__addsf3+0x20>
 25e:	39 f4       	brne	.+14     	; 0x26e <__addsf3+0x28>
 260:	9f 3f       	cpi	r25, 0xFF	; 255
 262:	19 f4       	brne	.+6      	; 0x26a <__addsf3+0x24>
 264:	26 f4       	brtc	.+8      	; 0x26e <__addsf3+0x28>
 266:	0c 94 01 02 	jmp	0x402	; 0x402 <__fp_nan>
 26a:	0e f4       	brtc	.+2      	; 0x26e <__addsf3+0x28>
 26c:	e0 95       	com	r30
 26e:	e7 fb       	bst	r30, 7
 270:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_inf>

00000274 <__addsf3x>:
 274:	e9 2f       	mov	r30, r25
 276:	0e 94 23 02 	call	0x446	; 0x446 <__fp_split3>
 27a:	58 f3       	brcs	.-42     	; 0x252 <__addsf3+0xc>
 27c:	ba 17       	cp	r27, r26
 27e:	62 07       	cpc	r22, r18
 280:	73 07       	cpc	r23, r19
 282:	84 07       	cpc	r24, r20
 284:	95 07       	cpc	r25, r21
 286:	20 f0       	brcs	.+8      	; 0x290 <__addsf3x+0x1c>
 288:	79 f4       	brne	.+30     	; 0x2a8 <__addsf3x+0x34>
 28a:	a6 f5       	brtc	.+104    	; 0x2f4 <__addsf3x+0x80>
 28c:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_zero>
 290:	0e f4       	brtc	.+2      	; 0x294 <__addsf3x+0x20>
 292:	e0 95       	com	r30
 294:	0b 2e       	mov	r0, r27
 296:	ba 2f       	mov	r27, r26
 298:	a0 2d       	mov	r26, r0
 29a:	0b 01       	movw	r0, r22
 29c:	b9 01       	movw	r22, r18
 29e:	90 01       	movw	r18, r0
 2a0:	0c 01       	movw	r0, r24
 2a2:	ca 01       	movw	r24, r20
 2a4:	a0 01       	movw	r20, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	ff 27       	eor	r31, r31
 2aa:	59 1b       	sub	r21, r25
 2ac:	99 f0       	breq	.+38     	; 0x2d4 <__addsf3x+0x60>
 2ae:	59 3f       	cpi	r21, 0xF9	; 249
 2b0:	50 f4       	brcc	.+20     	; 0x2c6 <__addsf3x+0x52>
 2b2:	50 3e       	cpi	r21, 0xE0	; 224
 2b4:	68 f1       	brcs	.+90     	; 0x310 <__addsf3x+0x9c>
 2b6:	1a 16       	cp	r1, r26
 2b8:	f0 40       	sbci	r31, 0x00	; 0
 2ba:	a2 2f       	mov	r26, r18
 2bc:	23 2f       	mov	r18, r19
 2be:	34 2f       	mov	r19, r20
 2c0:	44 27       	eor	r20, r20
 2c2:	58 5f       	subi	r21, 0xF8	; 248
 2c4:	f3 cf       	rjmp	.-26     	; 0x2ac <__addsf3x+0x38>
 2c6:	46 95       	lsr	r20
 2c8:	37 95       	ror	r19
 2ca:	27 95       	ror	r18
 2cc:	a7 95       	ror	r26
 2ce:	f0 40       	sbci	r31, 0x00	; 0
 2d0:	53 95       	inc	r21
 2d2:	c9 f7       	brne	.-14     	; 0x2c6 <__addsf3x+0x52>
 2d4:	7e f4       	brtc	.+30     	; 0x2f4 <__addsf3x+0x80>
 2d6:	1f 16       	cp	r1, r31
 2d8:	ba 0b       	sbc	r27, r26
 2da:	62 0b       	sbc	r22, r18
 2dc:	73 0b       	sbc	r23, r19
 2de:	84 0b       	sbc	r24, r20
 2e0:	ba f0       	brmi	.+46     	; 0x310 <__addsf3x+0x9c>
 2e2:	91 50       	subi	r25, 0x01	; 1
 2e4:	a1 f0       	breq	.+40     	; 0x30e <__addsf3x+0x9a>
 2e6:	ff 0f       	add	r31, r31
 2e8:	bb 1f       	adc	r27, r27
 2ea:	66 1f       	adc	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	c2 f7       	brpl	.-16     	; 0x2e2 <__addsf3x+0x6e>
 2f2:	0e c0       	rjmp	.+28     	; 0x310 <__addsf3x+0x9c>
 2f4:	ba 0f       	add	r27, r26
 2f6:	62 1f       	adc	r22, r18
 2f8:	73 1f       	adc	r23, r19
 2fa:	84 1f       	adc	r24, r20
 2fc:	48 f4       	brcc	.+18     	; 0x310 <__addsf3x+0x9c>
 2fe:	87 95       	ror	r24
 300:	77 95       	ror	r23
 302:	67 95       	ror	r22
 304:	b7 95       	ror	r27
 306:	f7 95       	ror	r31
 308:	9e 3f       	cpi	r25, 0xFE	; 254
 30a:	08 f0       	brcs	.+2      	; 0x30e <__addsf3x+0x9a>
 30c:	b0 cf       	rjmp	.-160    	; 0x26e <__addsf3+0x28>
 30e:	93 95       	inc	r25
 310:	88 0f       	add	r24, r24
 312:	08 f0       	brcs	.+2      	; 0x316 <__addsf3x+0xa2>
 314:	99 27       	eor	r25, r25
 316:	ee 0f       	add	r30, r30
 318:	97 95       	ror	r25
 31a:	87 95       	ror	r24
 31c:	08 95       	ret

0000031e <__fixunssfsi>:
 31e:	0e 94 2b 02 	call	0x456	; 0x456 <__fp_splitA>
 322:	88 f0       	brcs	.+34     	; 0x346 <__fixunssfsi+0x28>
 324:	9f 57       	subi	r25, 0x7F	; 127
 326:	98 f0       	brcs	.+38     	; 0x34e <__fixunssfsi+0x30>
 328:	b9 2f       	mov	r27, r25
 32a:	99 27       	eor	r25, r25
 32c:	b7 51       	subi	r27, 0x17	; 23
 32e:	b0 f0       	brcs	.+44     	; 0x35c <__fixunssfsi+0x3e>
 330:	e1 f0       	breq	.+56     	; 0x36a <__fixunssfsi+0x4c>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	1a f0       	brmi	.+6      	; 0x342 <__fixunssfsi+0x24>
 33c:	ba 95       	dec	r27
 33e:	c9 f7       	brne	.-14     	; 0x332 <__fixunssfsi+0x14>
 340:	14 c0       	rjmp	.+40     	; 0x36a <__fixunssfsi+0x4c>
 342:	b1 30       	cpi	r27, 0x01	; 1
 344:	91 f0       	breq	.+36     	; 0x36a <__fixunssfsi+0x4c>
 346:	0e 94 45 02 	call	0x48a	; 0x48a <__fp_zero>
 34a:	b1 e0       	ldi	r27, 0x01	; 1
 34c:	08 95       	ret
 34e:	0c 94 45 02 	jmp	0x48a	; 0x48a <__fp_zero>
 352:	67 2f       	mov	r22, r23
 354:	78 2f       	mov	r23, r24
 356:	88 27       	eor	r24, r24
 358:	b8 5f       	subi	r27, 0xF8	; 248
 35a:	39 f0       	breq	.+14     	; 0x36a <__fixunssfsi+0x4c>
 35c:	b9 3f       	cpi	r27, 0xF9	; 249
 35e:	cc f3       	brlt	.-14     	; 0x352 <__fixunssfsi+0x34>
 360:	86 95       	lsr	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b3 95       	inc	r27
 368:	d9 f7       	brne	.-10     	; 0x360 <__fixunssfsi+0x42>
 36a:	3e f4       	brtc	.+14     	; 0x37a <__fixunssfsi+0x5c>
 36c:	90 95       	com	r25
 36e:	80 95       	com	r24
 370:	70 95       	com	r23
 372:	61 95       	neg	r22
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	8f 4f       	sbci	r24, 0xFF	; 255
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	08 95       	ret

0000037c <__floatunsisf>:
 37c:	e8 94       	clt
 37e:	09 c0       	rjmp	.+18     	; 0x392 <__floatsisf+0x12>

00000380 <__floatsisf>:
 380:	97 fb       	bst	r25, 7
 382:	3e f4       	brtc	.+14     	; 0x392 <__floatsisf+0x12>
 384:	90 95       	com	r25
 386:	80 95       	com	r24
 388:	70 95       	com	r23
 38a:	61 95       	neg	r22
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	8f 4f       	sbci	r24, 0xFF	; 255
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	99 23       	and	r25, r25
 394:	a9 f0       	breq	.+42     	; 0x3c0 <__floatsisf+0x40>
 396:	f9 2f       	mov	r31, r25
 398:	96 e9       	ldi	r25, 0x96	; 150
 39a:	bb 27       	eor	r27, r27
 39c:	93 95       	inc	r25
 39e:	f6 95       	lsr	r31
 3a0:	87 95       	ror	r24
 3a2:	77 95       	ror	r23
 3a4:	67 95       	ror	r22
 3a6:	b7 95       	ror	r27
 3a8:	f1 11       	cpse	r31, r1
 3aa:	f8 cf       	rjmp	.-16     	; 0x39c <__floatsisf+0x1c>
 3ac:	fa f4       	brpl	.+62     	; 0x3ec <__floatsisf+0x6c>
 3ae:	bb 0f       	add	r27, r27
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <__floatsisf+0x36>
 3b2:	60 ff       	sbrs	r22, 0
 3b4:	1b c0       	rjmp	.+54     	; 0x3ec <__floatsisf+0x6c>
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	8f 4f       	sbci	r24, 0xFF	; 255
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	16 c0       	rjmp	.+44     	; 0x3ec <__floatsisf+0x6c>
 3c0:	88 23       	and	r24, r24
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <__floatsisf+0x48>
 3c4:	96 e9       	ldi	r25, 0x96	; 150
 3c6:	11 c0       	rjmp	.+34     	; 0x3ea <__floatsisf+0x6a>
 3c8:	77 23       	and	r23, r23
 3ca:	21 f0       	breq	.+8      	; 0x3d4 <__floatsisf+0x54>
 3cc:	9e e8       	ldi	r25, 0x8E	; 142
 3ce:	87 2f       	mov	r24, r23
 3d0:	76 2f       	mov	r23, r22
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <__floatsisf+0x5e>
 3d4:	66 23       	and	r22, r22
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <__floatsisf+0x74>
 3d8:	96 e8       	ldi	r25, 0x86	; 134
 3da:	86 2f       	mov	r24, r22
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	2a f0       	brmi	.+10     	; 0x3ec <__floatsisf+0x6c>
 3e2:	9a 95       	dec	r25
 3e4:	66 0f       	add	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	88 1f       	adc	r24, r24
 3ea:	da f7       	brpl	.-10     	; 0x3e2 <__floatsisf+0x62>
 3ec:	88 0f       	add	r24, r24
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	97 f9       	bld	r25, 7
 3f4:	08 95       	ret

000003f6 <__fp_inf>:
 3f6:	97 f9       	bld	r25, 7
 3f8:	9f 67       	ori	r25, 0x7F	; 127
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	08 95       	ret

00000402 <__fp_nan>:
 402:	9f ef       	ldi	r25, 0xFF	; 255
 404:	80 ec       	ldi	r24, 0xC0	; 192
 406:	08 95       	ret

00000408 <__fp_pscA>:
 408:	00 24       	eor	r0, r0
 40a:	0a 94       	dec	r0
 40c:	16 16       	cp	r1, r22
 40e:	17 06       	cpc	r1, r23
 410:	18 06       	cpc	r1, r24
 412:	09 06       	cpc	r0, r25
 414:	08 95       	ret

00000416 <__fp_pscB>:
 416:	00 24       	eor	r0, r0
 418:	0a 94       	dec	r0
 41a:	12 16       	cp	r1, r18
 41c:	13 06       	cpc	r1, r19
 41e:	14 06       	cpc	r1, r20
 420:	05 06       	cpc	r0, r21
 422:	08 95       	ret

00000424 <__fp_round>:
 424:	09 2e       	mov	r0, r25
 426:	03 94       	inc	r0
 428:	00 0c       	add	r0, r0
 42a:	11 f4       	brne	.+4      	; 0x430 <__fp_round+0xc>
 42c:	88 23       	and	r24, r24
 42e:	52 f0       	brmi	.+20     	; 0x444 <__fp_round+0x20>
 430:	bb 0f       	add	r27, r27
 432:	40 f4       	brcc	.+16     	; 0x444 <__fp_round+0x20>
 434:	bf 2b       	or	r27, r31
 436:	11 f4       	brne	.+4      	; 0x43c <__fp_round+0x18>
 438:	60 ff       	sbrs	r22, 0
 43a:	04 c0       	rjmp	.+8      	; 0x444 <__fp_round+0x20>
 43c:	6f 5f       	subi	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	08 95       	ret

00000446 <__fp_split3>:
 446:	57 fd       	sbrc	r21, 7
 448:	90 58       	subi	r25, 0x80	; 128
 44a:	44 0f       	add	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	59 f0       	breq	.+22     	; 0x466 <__fp_splitA+0x10>
 450:	5f 3f       	cpi	r21, 0xFF	; 255
 452:	71 f0       	breq	.+28     	; 0x470 <__fp_splitA+0x1a>
 454:	47 95       	ror	r20

00000456 <__fp_splitA>:
 456:	88 0f       	add	r24, r24
 458:	97 fb       	bst	r25, 7
 45a:	99 1f       	adc	r25, r25
 45c:	61 f0       	breq	.+24     	; 0x476 <__fp_splitA+0x20>
 45e:	9f 3f       	cpi	r25, 0xFF	; 255
 460:	79 f0       	breq	.+30     	; 0x480 <__fp_splitA+0x2a>
 462:	87 95       	ror	r24
 464:	08 95       	ret
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	55 1f       	adc	r21, r21
 46e:	f2 cf       	rjmp	.-28     	; 0x454 <__fp_split3+0xe>
 470:	46 95       	lsr	r20
 472:	f1 df       	rcall	.-30     	; 0x456 <__fp_splitA>
 474:	08 c0       	rjmp	.+16     	; 0x486 <__fp_splitA+0x30>
 476:	16 16       	cp	r1, r22
 478:	17 06       	cpc	r1, r23
 47a:	18 06       	cpc	r1, r24
 47c:	99 1f       	adc	r25, r25
 47e:	f1 cf       	rjmp	.-30     	; 0x462 <__fp_splitA+0xc>
 480:	86 95       	lsr	r24
 482:	71 05       	cpc	r23, r1
 484:	61 05       	cpc	r22, r1
 486:	08 94       	sec
 488:	08 95       	ret

0000048a <__fp_zero>:
 48a:	e8 94       	clt

0000048c <__fp_szero>:
 48c:	bb 27       	eor	r27, r27
 48e:	66 27       	eor	r22, r22
 490:	77 27       	eor	r23, r23
 492:	cb 01       	movw	r24, r22
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret

00000498 <__mulsf3>:
 498:	0e 94 5f 02 	call	0x4be	; 0x4be <__mulsf3x>
 49c:	0c 94 12 02 	jmp	0x424	; 0x424 <__fp_round>
 4a0:	0e 94 04 02 	call	0x408	; 0x408 <__fp_pscA>
 4a4:	38 f0       	brcs	.+14     	; 0x4b4 <__mulsf3+0x1c>
 4a6:	0e 94 0b 02 	call	0x416	; 0x416 <__fp_pscB>
 4aa:	20 f0       	brcs	.+8      	; 0x4b4 <__mulsf3+0x1c>
 4ac:	95 23       	and	r25, r21
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <__mulsf3+0x1c>
 4b0:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_inf>
 4b4:	0c 94 01 02 	jmp	0x402	; 0x402 <__fp_nan>
 4b8:	11 24       	eor	r1, r1
 4ba:	0c 94 46 02 	jmp	0x48c	; 0x48c <__fp_szero>

000004be <__mulsf3x>:
 4be:	0e 94 23 02 	call	0x446	; 0x446 <__fp_split3>
 4c2:	70 f3       	brcs	.-36     	; 0x4a0 <__mulsf3+0x8>

000004c4 <__mulsf3_pse>:
 4c4:	95 9f       	mul	r25, r21
 4c6:	c1 f3       	breq	.-16     	; 0x4b8 <__mulsf3+0x20>
 4c8:	95 0f       	add	r25, r21
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	55 1f       	adc	r21, r21
 4ce:	62 9f       	mul	r22, r18
 4d0:	f0 01       	movw	r30, r0
 4d2:	72 9f       	mul	r23, r18
 4d4:	bb 27       	eor	r27, r27
 4d6:	f0 0d       	add	r31, r0
 4d8:	b1 1d       	adc	r27, r1
 4da:	63 9f       	mul	r22, r19
 4dc:	aa 27       	eor	r26, r26
 4de:	f0 0d       	add	r31, r0
 4e0:	b1 1d       	adc	r27, r1
 4e2:	aa 1f       	adc	r26, r26
 4e4:	64 9f       	mul	r22, r20
 4e6:	66 27       	eor	r22, r22
 4e8:	b0 0d       	add	r27, r0
 4ea:	a1 1d       	adc	r26, r1
 4ec:	66 1f       	adc	r22, r22
 4ee:	82 9f       	mul	r24, r18
 4f0:	22 27       	eor	r18, r18
 4f2:	b0 0d       	add	r27, r0
 4f4:	a1 1d       	adc	r26, r1
 4f6:	62 1f       	adc	r22, r18
 4f8:	73 9f       	mul	r23, r19
 4fa:	b0 0d       	add	r27, r0
 4fc:	a1 1d       	adc	r26, r1
 4fe:	62 1f       	adc	r22, r18
 500:	83 9f       	mul	r24, r19
 502:	a0 0d       	add	r26, r0
 504:	61 1d       	adc	r22, r1
 506:	22 1f       	adc	r18, r18
 508:	74 9f       	mul	r23, r20
 50a:	33 27       	eor	r19, r19
 50c:	a0 0d       	add	r26, r0
 50e:	61 1d       	adc	r22, r1
 510:	23 1f       	adc	r18, r19
 512:	84 9f       	mul	r24, r20
 514:	60 0d       	add	r22, r0
 516:	21 1d       	adc	r18, r1
 518:	82 2f       	mov	r24, r18
 51a:	76 2f       	mov	r23, r22
 51c:	6a 2f       	mov	r22, r26
 51e:	11 24       	eor	r1, r1
 520:	9f 57       	subi	r25, 0x7F	; 127
 522:	50 40       	sbci	r21, 0x00	; 0
 524:	9a f0       	brmi	.+38     	; 0x54c <__mulsf3_pse+0x88>
 526:	f1 f0       	breq	.+60     	; 0x564 <__mulsf3_pse+0xa0>
 528:	88 23       	and	r24, r24
 52a:	4a f0       	brmi	.+18     	; 0x53e <__mulsf3_pse+0x7a>
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	bb 1f       	adc	r27, r27
 532:	66 1f       	adc	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	91 50       	subi	r25, 0x01	; 1
 53a:	50 40       	sbci	r21, 0x00	; 0
 53c:	a9 f7       	brne	.-22     	; 0x528 <__mulsf3_pse+0x64>
 53e:	9e 3f       	cpi	r25, 0xFE	; 254
 540:	51 05       	cpc	r21, r1
 542:	80 f0       	brcs	.+32     	; 0x564 <__mulsf3_pse+0xa0>
 544:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_inf>
 548:	0c 94 46 02 	jmp	0x48c	; 0x48c <__fp_szero>
 54c:	5f 3f       	cpi	r21, 0xFF	; 255
 54e:	e4 f3       	brlt	.-8      	; 0x548 <__mulsf3_pse+0x84>
 550:	98 3e       	cpi	r25, 0xE8	; 232
 552:	d4 f3       	brlt	.-12     	; 0x548 <__mulsf3_pse+0x84>
 554:	86 95       	lsr	r24
 556:	77 95       	ror	r23
 558:	67 95       	ror	r22
 55a:	b7 95       	ror	r27
 55c:	f7 95       	ror	r31
 55e:	e7 95       	ror	r30
 560:	9f 5f       	subi	r25, 0xFF	; 255
 562:	c1 f7       	brne	.-16     	; 0x554 <__mulsf3_pse+0x90>
 564:	fe 2b       	or	r31, r30
 566:	88 0f       	add	r24, r24
 568:	91 1d       	adc	r25, r1
 56a:	96 95       	lsr	r25
 56c:	87 95       	ror	r24
 56e:	97 f9       	bld	r25, 7
 570:	08 95       	ret

00000572 <__umulhisi3>:
 572:	a2 9f       	mul	r26, r18
 574:	b0 01       	movw	r22, r0
 576:	b3 9f       	mul	r27, r19
 578:	c0 01       	movw	r24, r0
 57a:	a3 9f       	mul	r26, r19
 57c:	70 0d       	add	r23, r0
 57e:	81 1d       	adc	r24, r1
 580:	11 24       	eor	r1, r1
 582:	91 1d       	adc	r25, r1
 584:	b2 9f       	mul	r27, r18
 586:	70 0d       	add	r23, r0
 588:	81 1d       	adc	r24, r1
 58a:	11 24       	eor	r1, r1
 58c:	91 1d       	adc	r25, r1
 58e:	08 95       	ret

00000590 <_exit>:
 590:	f8 94       	cli

00000592 <__stop_program>:
 592:	ff cf       	rjmp	.-2      	; 0x592 <__stop_program>
