
UART_PWM_328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d2  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e1  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d6  00000000  00000000  000014c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003f  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <DIO_Init>:


void DIO_Init()
{
	//DDRA=DDRA_INIT;
	DDRB=DDRB_INIT;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRC=DDRC_INIT;
  84:	8f e7       	ldi	r24, 0x7F	; 127
  86:	87 b9       	out	0x07, r24	; 7
	DDRD=DDRD_INIT;
  88:	8e e7       	ldi	r24, 0x7E	; 126
  8a:	8a b9       	out	0x0a, r24	; 10
	
	
	//PORTA=PORTA_INIT;
	PORTB=PORTB_INIT;
  8c:	15 b8       	out	0x05, r1	; 5
	PORTC=PORTC_INIT;
  8e:	18 b8       	out	0x08, r1	; 8
	PORTD=PORTD_INIT;
  90:	1b b8       	out	0x0b, r1	; 11
  92:	08 95       	ret

00000094 <main>:
#include "UART_init.h"
#include "PWM.h"
#include "MOTOR.h"
int main(void)
{
	DIO_Init();
  94:	0e 94 40 00 	call	0x80	; 0x80 <DIO_Init>
	UART_init();
  98:	0e 94 88 00 	call	0x110	; 0x110 <UART_init>
	PWM_init();
  9c:	0e 94 64 00 	call	0xc8	; 0xc8 <PWM_init>
	char motor_status;
    /* Replace with your application code */
    while (1) 
    {
		motor_status=UART_recieve();
  a0:	0e 94 95 00 	call	0x12a	; 0x12a <UART_recieve>
		if(motor_status==1)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	19 f4       	brne	.+6      	; 0xae <main+0x1a>
		{
		 motor_on();
  a8:	0e 94 5c 00 	call	0xb8	; 0xb8 <motor_on>
  ac:	f9 cf       	rjmp	.-14     	; 0xa0 <main+0xc>
		}
		if(motor_status==0)
  ae:	81 11       	cpse	r24, r1
  b0:	f7 cf       	rjmp	.-18     	; 0xa0 <main+0xc>
		{
			motor_off();
  b2:	0e 94 60 00 	call	0xc0	; 0xc0 <motor_off>
  b6:	f4 cf       	rjmp	.-24     	; 0xa0 <main+0xc>

000000b8 <motor_on>:
 *  Author: A.lotfy
 */ 
#include "MOTOR.h"
void motor_on(void)
{
 PWM_DUTY_CYCLE(75);	
  b8:	8b e4       	ldi	r24, 0x4B	; 75
  ba:	0e 94 7e 00 	call	0xfc	; 0xfc <PWM_DUTY_CYCLE>
  be:	08 95       	ret

000000c0 <motor_off>:
}
void motor_off(void)
{
 PWM_DUTY_CYCLE(0);	
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 7e 00 	call	0xfc	; 0xfc <PWM_DUTY_CYCLE>
  c6:	08 95       	ret

000000c8 <PWM_init>:
#include "PWM.h"
#include "common.h"
#include <avr/io.h>
void PWM_init(void)
{
	SET_BIT(TCCR0A,COM0A1);
  c8:	84 b5       	in	r24, 0x24	; 36
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	84 bd       	out	0x24, r24	; 36
	CLR_BIT(TCCR0A,COM0A0);
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	8f 7b       	andi	r24, 0xBF	; 191
  d2:	84 bd       	out	0x24, r24	; 36
	SET_BIT(TCCR0A,WGM00);
  d4:	84 b5       	in	r24, 0x24	; 36
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	84 bd       	out	0x24, r24	; 36
	SET_BIT(TCCR0A,WGM01);
  da:	84 b5       	in	r24, 0x24	; 36
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	84 bd       	out	0x24, r24	; 36
	CLR_BIT(TCCR0B,WGM02);
  e0:	85 b5       	in	r24, 0x25	; 37
  e2:	87 7f       	andi	r24, 0xF7	; 247
  e4:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR0B,CS00);
  e6:	85 b5       	in	r24, 0x25	; 37
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR0B,CS01);
  ec:	85 b5       	in	r24, 0x25	; 37
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR0B,CS02);
  f2:	85 b5       	in	r24, 0x25	; 37
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	85 bd       	out	0x25, r24	; 37
	OCR0A=0;
  f8:	17 bc       	out	0x27, r1	; 39
  fa:	08 95       	ret

000000fc <PWM_DUTY_CYCLE>:
	//TCNT0=0;
}
void PWM_DUTY_CYCLE(char x)
{
 OCR0A=x*255/100;	
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	82 9f       	mul	r24, r18
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	64 e6       	ldi	r22, 0x64	; 100
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 9d 00 	call	0x13a	; 0x13a <__divmodhi4>
 10c:	67 bd       	out	0x27, r22	; 39
 10e:	08 95       	ret

00000110 <UART_init>:
void UART_Transmit(char data)
{
	while(!(UCSR0A & ( 1<<UDRE0)))
	{
	}
	UDR0 = data;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 116:	8f e2       	ldi	r24, 0x2F	; 47
 118:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 128:	08 95       	ret

0000012a <UART_recieve>:
}
char UART_recieve()
{
	while(!(UCSR0A &(1<<RXC0)))
 12a:	e0 ec       	ldi	r30, 0xC0	; 192
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	ec f7       	brge	.-6      	; 0x12e <UART_recieve+0x4>
	{
		
	}
	return UDR0;
 134:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 138:	08 95       	ret

0000013a <__divmodhi4>:
 13a:	97 fb       	bst	r25, 7
 13c:	07 2e       	mov	r0, r23
 13e:	16 f4       	brtc	.+4      	; 0x144 <__divmodhi4+0xa>
 140:	00 94       	com	r0
 142:	07 d0       	rcall	.+14     	; 0x152 <__divmodhi4_neg1>
 144:	77 fd       	sbrc	r23, 7
 146:	09 d0       	rcall	.+18     	; 0x15a <__divmodhi4_neg2>
 148:	0e 94 b1 00 	call	0x162	; 0x162 <__udivmodhi4>
 14c:	07 fc       	sbrc	r0, 7
 14e:	05 d0       	rcall	.+10     	; 0x15a <__divmodhi4_neg2>
 150:	3e f4       	brtc	.+14     	; 0x160 <__divmodhi4_exit>

00000152 <__divmodhi4_neg1>:
 152:	90 95       	com	r25
 154:	81 95       	neg	r24
 156:	9f 4f       	sbci	r25, 0xFF	; 255
 158:	08 95       	ret

0000015a <__divmodhi4_neg2>:
 15a:	70 95       	com	r23
 15c:	61 95       	neg	r22
 15e:	7f 4f       	sbci	r23, 0xFF	; 255

00000160 <__divmodhi4_exit>:
 160:	08 95       	ret

00000162 <__udivmodhi4>:
 162:	aa 1b       	sub	r26, r26
 164:	bb 1b       	sub	r27, r27
 166:	51 e1       	ldi	r21, 0x11	; 17
 168:	07 c0       	rjmp	.+14     	; 0x178 <__udivmodhi4_ep>

0000016a <__udivmodhi4_loop>:
 16a:	aa 1f       	adc	r26, r26
 16c:	bb 1f       	adc	r27, r27
 16e:	a6 17       	cp	r26, r22
 170:	b7 07       	cpc	r27, r23
 172:	10 f0       	brcs	.+4      	; 0x178 <__udivmodhi4_ep>
 174:	a6 1b       	sub	r26, r22
 176:	b7 0b       	sbc	r27, r23

00000178 <__udivmodhi4_ep>:
 178:	88 1f       	adc	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	5a 95       	dec	r21
 17e:	a9 f7       	brne	.-22     	; 0x16a <__udivmodhi4_loop>
 180:	80 95       	com	r24
 182:	90 95       	com	r25
 184:	bc 01       	movw	r22, r24
 186:	cd 01       	movw	r24, r26
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
